{"version":3,"sources":["components/navigation/logo/index.tsx","components/navigation/menu/item/index.tsx","components/navigation/menu/index.tsx","components/navigation/index.tsx","components/view/index.tsx","views/main/index.tsx","components/app.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Logo","children","MyItem","styled","li","Item","MyMenu","ul","Menu","to","MyNavigation","nav","Navigation","MyView","div","View","rest","center","display","alignItems","justifyContent","Main","style","textAlign","App","className","exact","path","component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gNAAO,SAASA,EAAT,GAAkC,IAAlBC,EAAiB,EAAjBA,SACrB,OAAO,6BAAKA,ICCd,I,EAAMC,EAASC,IAAOC,GAAV,sGAML,SAASC,EAAT,GAAkC,IAAlBJ,EAAiB,EAAjBA,SACrB,OAAO,cAACC,EAAD,UAASD,ICLlB,I,EAAMK,EAASH,IAAOI,GAAV,2FAML,SAASC,IACd,OACE,eAACF,EAAD,WACE,cAACD,EAAD,UACE,cAAC,IAAD,CAAQI,GAAG,WAAX,wBAEF,cAACJ,EAAD,UACE,cAAC,IAAD,CAAQI,GAAG,UAAX,0BCZR,IAAMC,EAAeP,IAAOQ,IAAV,yJASX,SAASC,IACd,OACE,eAACF,EAAD,WACE,cAACV,EAAD,UACE,cAAC,IAAD,CAAQS,GAAG,GAAX,wBAEF,cAACD,EAAD,O,sBClBAK,EAASV,IAAOW,IAAV,oGAWL,SAASC,EAAT,GAAkD,IAAlCd,EAAiC,EAAjCA,SAAae,EAAoB,4BACtD,OAAO,cAACH,EAAD,2BAAYG,GAAZ,aAAmBf,KCZ5B,IAAMgB,EAA8B,CAClCC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAGX,SAASC,IACd,OACE,cAACN,EAAD,CAAMO,MAAOL,EAAb,SACE,qBAAKK,MAAO,CAAEC,UAAW,UAAzB,SACE,mDCKOC,MAbf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAACb,EAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,IAAIC,UAAWP,YCEvBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEpH5BtB,M","file":"static/js/main.d0fdad9d.chunk.js","sourcesContent":["export function Logo({ children }: any) {\r\n  return <h2>{children}</h2>;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nconst MyItem = styled.li`\r\n  margin: 0px 0px 0px 2rem;\r\n  font-weight: bold;\r\n  font-style: italic;\r\n`;\r\n\r\nexport function Item({ children }: any) {\r\n  return <MyItem>{children}</MyItem>;\r\n}\r\n","import styled from \"styled-components\";\r\nimport { Link as Anchor } from \"react-router-dom\";\r\nimport { Item } from \"./item\";\r\n\r\nconst MyMenu = styled.ul`\r\n  display: flex;\r\n  list-style: none;\r\n  align-items: center;\r\n`;\r\n\r\nexport function Menu() {\r\n  return (\r\n    <MyMenu>\r\n      <Item>\r\n        <Anchor to=\"showcase\">showcase</Anchor>\r\n      </Item>\r\n      <Item>\r\n        <Anchor to=\"contact\">contact</Anchor>\r\n      </Item>\r\n    </MyMenu>\r\n  );\r\n}\r\n\r\nexport { Item, MyMenu };\r\n","import styled from \"styled-components\";\r\nimport { Link as Anchor } from \"react-router-dom\";\r\nimport { Logo } from \"./logo\";\r\nimport { Menu } from \"./menu\";\r\n\r\nconst MyNavigation = styled.nav`\r\n  display: flex;\r\n  width: 90%;\r\n  height: 8vh;\r\n  margin: auto;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nexport function Navigation() {\r\n  return (\r\n    <MyNavigation>\r\n      <Logo>\r\n        <Anchor to=\"\">pinkcape</Anchor>\r\n      </Logo>\r\n      <Menu />\r\n    </MyNavigation>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nconst MyView = styled.div`\r\n  width: 90%;\r\n  min-height: calc(92vh - 1rem - 5px);\r\n  margin: auto;\r\n`;\r\n\r\nexport type Properties = {\r\n  children?: any;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nexport function View({ children, ...rest }: Properties) {\r\n  return <MyView {...rest}>{children}</MyView>;\r\n}\r\n","import { View } from \"../../components\";\r\n\r\nconst center: React.CSSProperties = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\nexport function Main() {\r\n  return (\r\n    <View style={center}>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h3>UNDER WOKRING</h3>\r\n      </div>\r\n    </View>\r\n  );\r\n}\r\n","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { Navigation } from \".\";\r\nimport { Main } from \"../views\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <BrowserRouter>\r\n        <Navigation />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Main} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/sass/style.scss\";\r\nimport App from \"./components/app\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}