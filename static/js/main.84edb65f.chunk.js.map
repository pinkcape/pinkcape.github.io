{"version":3,"sources":["components/navigation/logo/index.tsx","components/navigation/index.tsx","components/footer/index.tsx","components/app.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Logo","styled","span","Component","children","className","MyNavigation","nav","Navigation","MyFooter","footer","Footer","href","App","isDesktop","useMediaQuery","query","AudioContext","window","webkitAudioContext","useState","player","Audio","audio","context","fftSize","strength","frequencyIndex","useEffect","analyser","createAnalyser","createMediaElementSource","connect","animationFrame","undefined","animate","requestAnimationFrame","frequencies","Uint8Array","frequencyBinCount","getByteFrequencyData","scale","transform","gsap","to","onplay","e","onended","cancelAnimationFrame","play","then","catch","console","error","useEvent","style","width","minHeight","textAlign","margin","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"uOAEMA,EAAOC,IAAOC,KAAV,gHAOK,SAASC,EAAT,GAAuC,IAAlBC,EAAiB,EAAjBA,SAClC,OAAO,cAACJ,EAAD,CAAMK,UAAU,aAAhB,SAA8BD,ICPvC,I,EAAME,EAAeL,IAAOM,IAAV,+JASLC,EAAa,WACxB,OACE,cAACF,EAAD,UACE,cAAC,EAAD,0BCbAG,EAAWR,IAAOS,OAAV,mIAQDC,EAAS,WACpB,OACE,cAACF,EAAD,UACE,mBAAGG,KAAK,+BAAR,SACE,0FCRKC,EAAM,WACjB,IAAIC,EAAYC,wBAAc,CAC5BC,MAAO,+BAGLC,EAEFC,OAAOD,cAAgBC,OAAOC,mBAPT,EAWnBC,mBAAS,CACXC,OAAQ,IAAIC,MAAM,aAClBC,MAAO,IAAID,MAAM,aACjBE,QAAS,IAAIP,EACbQ,QAAS,IACTC,SAAUZ,EAAY,GAAK,GAC3Ba,eAAgB,IAjBK,sBAUnBN,EAVmB,EAUnBA,OAAQE,EAVW,EAUXA,MAAOC,EAVI,EAUJA,QAASC,EAVL,EAUKA,QAASC,EAVd,EAUcA,SAAUC,EAVxB,EAUwBA,eAU/CC,qBAAU,WACR,IAAIC,EAAWL,EAAQM,iBAEvBD,EAASJ,QAAUA,EAEND,EAAQO,yBAAyBR,GAEvCS,QAAQH,GAEf,IAAII,OAAqCC,EAErCC,EAAU,SAAVA,IACFF,EAAiBG,sBAAsBD,GAEvC,IAAIE,EAAc,IAAIC,WAAWT,EAASU,mBAE1CV,EAASW,qBAAqBH,GAE9B,IAEII,EAFYJ,EAAYV,IAEQ,EAAXD,GAErBgB,EAAS,gBAAYD,EAAQ,EAAI,EAAIA,EAA5B,KAEbE,IAAKC,GAAG,cAAe,CAAEF,eAG3BrB,EAAOwB,OAAS,SAACC,GAAD,OAAOX,KAEvBd,EAAO0B,QAAU,SAACD,GACZb,GAAgBe,qBAAqBf,MAE1C,CAACV,EAAOC,EAASC,EAASE,EAAgBN,EAAQK,EAAUT,IAE/D,IAAIgC,EAAO,WACT5B,EACG4B,OACAC,MAAK,kBAAOjC,EAAeM,EAAM0B,YAASf,KAC1CiB,MAAMC,QAAQC,QASnB,OANAC,YAAS,QAAQ,WACXxC,GAAWmC,OAGjBK,YAAS,cAAc,kBAAML,OAG3B,sBAAK5C,UAAU,MAAf,UACE,cAAC,EAAD,IACA,sBAAMkD,MAAO,CAAEC,MAAO,OAAQC,UAAW,SAAzC,SACE,sBAAKF,MAAO,CAAEG,UAAW,UAAzB,UACE,mBACEH,MAAO,CACLI,OAAQ,iBACRH,MAAO,OAHX,uEAQEvC,GACA,4FAIN,cAAC,EAAD,QC/EA2C,EAAcC,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACThB,MAAK,SAACqB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BzB,QAAQ0B,IACN,+GAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBnB,QAAQ0B,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BpB,OAAM,SAACE,GACND,QAAQC,MAAM,4CAA6CA,MCjGjE,IAYe4B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFcnB,SAAkB1B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,GAAwB7E,OAAO4C,SAASlD,MACpDoF,SAAW9E,OAAO4C,SAASkC,OAIvC,OAGF9E,OAAO+E,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM6B,GAAN,sBAEPnC,IAgEV,SAAiCM,EAAeC,GAE9C+B,MAAMhC,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5BjD,MAAK,SAACkD,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpC,UAAUC,cAAcoC,MAAMvD,MAAK,SAACqB,GAClCA,EAAamC,aAAaxD,MAAK,WAC7BhC,OAAO4C,SAAS6C,eAKpB1C,EAAgBC,EAAOC,MAG1BhB,OAAM,WACLC,QAAQ0B,IAAI,oEAtFV8B,CAAwB1C,EAAOC,GAI/BC,UAAUC,cAAcoC,MAAMvD,MAAK,WACjCE,QAAQ0B,IACN,+GAMJb,EAAgBC,EAAOC,OEpC/B0C,GAKA5B,M","file":"static/js/main.84edb65f.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Logo = styled.span`\r\n  color: #ff3769;\r\n  cursor: pointer;\r\n  font-size: 1.25rem;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport default function Component({ children }: any) {\r\n  return <Logo className=\"visualizer\">{children}</Logo>;\r\n}\r\n","import styled from \"styled-components\";\r\nimport Logo from \"./logo\";\r\n\r\nconst MyNavigation = styled.nav`\r\n  width: 90%;\r\n  height: 71px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin: 1rem auto;\r\n`;\r\n\r\nexport const Navigation = () => {\r\n  return (\r\n    <MyNavigation>\r\n      <Logo>pinkcape</Logo>\r\n    </MyNavigation>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst MyFooter = styled.footer`\r\n  width: 100%;\r\n  height: 5rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <MyFooter>\r\n      <a href=\"https://youtu.be/oTs6oQx1WJY\">\r\n        <span>music ðŸŽ¶ Agnes Obel - Under Giant Trees</span>\r\n      </a>\r\n    </MyFooter>\r\n  );\r\n};\r\n","import { useEvent } from \"react-use\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { gsap } from \"gsap\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { Navigation, Footer } from \".\";\r\n\r\nexport const App = () => {\r\n  let isDesktop = useMediaQuery({\r\n    query: \"(min-device-width: 1224px)\",\r\n  });\r\n\r\n  let AudioContext =\r\n    // @ts-ignore\r\n    window.AudioContext || window.webkitAudioContext;\r\n\r\n  let [\r\n    { player, audio, context, fftSize, strength, frequencyIndex },\r\n  ] = useState({\r\n    player: new Audio(\"Audio.mp3\"),\r\n    audio: new Audio(\"Audio.mp3\"),\r\n    context: new AudioContext(),\r\n    fftSize: 256,\r\n    strength: isDesktop ? 65 : 80,\r\n    frequencyIndex: 5,\r\n  });\r\n\r\n  useEffect(() => {\r\n    let analyser = context.createAnalyser();\r\n\r\n    analyser.fftSize = fftSize;\r\n\r\n    let source = context.createMediaElementSource(audio);\r\n\r\n    source.connect(analyser);\r\n\r\n    let animationFrame: number | undefined = undefined;\r\n\r\n    let animate = () => {\r\n      animationFrame = requestAnimationFrame(animate);\r\n\r\n      let frequencies = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n      analyser.getByteFrequencyData(frequencies);\r\n\r\n      let frequency = frequencies[frequencyIndex];\r\n\r\n      let scale = frequency / (strength * 2);\r\n\r\n      let transform = `scale(${scale < 1 ? 1 : scale})`;\r\n\r\n      gsap.to(\".visualizer\", { transform });\r\n    };\r\n\r\n    player.onplay = (e) => animate();\r\n\r\n    player.onended = (e) => {\r\n      if (animationFrame) cancelAnimationFrame(animationFrame);\r\n    };\r\n  }, [audio, context, fftSize, frequencyIndex, player, strength, AudioContext]);\r\n\r\n  let play = () => {\r\n    player\r\n      .play()\r\n      .then(() => (AudioContext ? audio.play() : undefined))\r\n      .catch(console.error);\r\n  };\r\n\r\n  useEvent(\"load\", () => {\r\n    if (isDesktop) play();\r\n  });\r\n\r\n  useEvent(\"touchstart\", () => play());\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Navigation />\r\n      <main style={{ width: \"100%\", minHeight: \"100vh\" }}>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <p\r\n            style={{\r\n              margin: \"9rem auto 1rem\",\r\n              width: \"80%\",\r\n            }}\r\n          >\r\n            Hey ðŸ‘‹, i'm pinkcape full-stack web developer.\r\n          </p>\r\n          {!AudioContext && (\r\n            <span>currently your browser doesn't support AudioContext</span>\r\n          )}\r\n        </div>\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/index.css\";\nimport { App } from \"./components/app\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}